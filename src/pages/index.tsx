import Head from "next/head";

import Header from "@/components/Header";
import Pagination from "@/components/Pagination";
import PokemonsGrid from "@/components/PokemonsGrid";

import { useEffect, useState } from "react";
import Image from "next/image";
import logo from "../../public/pokeball.svg";

import { GetServerSideProps } from "next";

import {
  client,
  POKEMONS_FILTER_QUERY,
  POKEMONS_QUERY,
} from "@/graphql/queries";

import { HomeProps, Pokemons } from "@/interfaces/interfaces";

export const getServerSideProps: GetServerSideProps<HomeProps> = async (
  context
) => {
  const { page = "1" } = context.query;

  let pageNumber = Number(page) || 1;

  const limit = 16;
  let offset = (pageNumber - 1) * limit;

  if (offset < 0) {
    pageNumber = 1;

    return {
      redirect: {
        destination: `/?page=${pageNumber}`,
        permanent: false,
      },
    };
  }

  if (context.query.filter) {
    const type = context.query.filter;

    const { data } = await client.query({
      query: POKEMONS_FILTER_QUERY,
      variables: { type, limit, offset },
    });

    const pokemons = data.pokemon_v2_pokemon.map((poke: Pokemons) => {
      return poke;
    });

    const totalPokemons = data.pokemon_v2_pokemon_aggregate.aggregate.count;

    const totalPages = Math.ceil(totalPokemons / limit);

    return {
      props: {
        data: pokemons,
        page: pageNumber,
        totalPages: totalPages,
      },
    };
  }

  const { data } = await client.query({
    query: POKEMONS_QUERY,
    variables: { limit, offset },
  });

  const pokemons = data.pokemon_v2_pokemon.map((poke: Pokemons) => {
    return poke;
  });

  const totalPokemons = 1008;
  const totalPages = Math.ceil(totalPokemons / limit);

  if (pageNumber > totalPages) {
    return {
      redirect: {
        destination: `/?page=${totalPages}`,
        permanent: false,
      },
    };
  }

  return {
    props: {
      data: pokemons,
      page: pageNumber,
      totalPages,
    },
  };
};

const Home = ({ data, totalPages, page }: HomeProps) => {
  const [isLoading, setIsLoading] = useState<boolean>(true);

  useEffect(() => {
    setIsLoading(true);

    setTimeout(() => {
      setIsLoading(false);
    }, 1500);
  }, [data]);

  return (
    <>
      <Head>
        <title>Pokedex Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/pokeball.svg" />
      </Head>

      <Header />

      {isLoading ? (
        <div className="loading">
          <Image priority alt="logo" src={logo} height={150} width={150} />
        </div>
      ) : (
        <>
          <PokemonsGrid data={data} />
          <Pagination page={page} totalPages={totalPages} />
        </>
      )}
    </>
  );
};

export default Home;
